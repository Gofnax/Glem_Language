
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORleftEQUALNOTEQUALGREATERLESSGREATEREQUALLESSEQUALleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightNOTAND BOOLEAN COMMA DIVIDE DOT EQUAL GREATER GREATEREQUAL IDENTIFIER LAMBDA LCURLY LESS LESSEQUAL LPAREN MEY MINUS MODULO MULTIPLY NOT NOTEQUAL NUMBER OR PLUS RCURLY RPAREN SEMICOLONprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression SEMICOLON\n                 | function_definitionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression NOTEQUAL expression\n                  | expression EQUAL expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLEANexpression : IDENTIFIERexpression : IDENTIFIER LPAREN param_list RPARENexpression : LAMBDA IDENTIFIER DOT LPAREN expression RPARENfunction_definition : MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLONarg_list : IDENTIFIER\n                | IDENTIFIER COMMA arg_listparam_list : expression\n                  | expression COMMA param_list'
    
_lr_action_items = {'NOT':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,52,53,64,66,],[6,6,-3,-5,6,6,-2,-4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-26,]),'LPAREN':([0,2,3,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,49,52,53,54,64,66,],[7,7,-3,-5,7,7,30,-2,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,53,7,7,57,7,-26,]),'NUMBER':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,52,53,64,66,],[8,8,-3,-5,8,8,-2,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-26,]),'BOOLEAN':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,52,53,64,66,],[9,9,-3,-5,9,9,-2,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-26,]),'IDENTIFIER':([0,2,3,5,6,7,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,32,52,53,57,61,64,66,],[10,10,-3,-5,10,10,31,-2,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,50,10,10,59,59,10,-26,]),'LAMBDA':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,52,53,64,66,],[11,11,-3,-5,11,11,-2,-4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-26,]),'MEY':([0,2,3,5,13,14,66,],[12,12,-3,-5,-2,-4,-26,]),'$end':([1,2,3,5,13,14,66,],[0,-1,-3,-5,-2,-4,-26,]),'SEMICOLON':([4,8,9,10,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,51,58,65,],[14,-21,-22,-23,-19,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,-24,-25,66,]),'PLUS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[15,-21,-22,-23,-19,15,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,-20,15,-24,15,-25,15,]),'MINUS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[16,-21,-22,-23,-19,16,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,-20,16,-24,16,-25,16,]),'MULTIPLY':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[17,-21,-22,-23,-19,17,17,17,-8,-9,-10,17,17,17,17,17,17,17,17,-20,17,-24,17,-25,17,]),'DIVIDE':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[18,-21,-22,-23,-19,18,18,18,-8,-9,-10,18,18,18,18,18,18,18,18,-20,18,-24,18,-25,18,]),'MODULO':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[19,-21,-22,-23,-19,19,19,19,-8,-9,-10,19,19,19,19,19,19,19,19,-20,19,-24,19,-25,19,]),'AND':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[20,-21,-22,-23,-19,20,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,20,-24,20,-25,20,]),'OR':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[21,-21,-22,-23,-19,21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,21,-24,21,-25,21,]),'NOTEQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[22,-21,-22,-23,-19,22,-6,-7,-8,-9,-10,22,22,-13,-14,-15,-16,-17,-18,-20,22,-24,22,-25,22,]),'EQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[23,-21,-22,-23,-19,23,-6,-7,-8,-9,-10,23,23,-13,-14,-15,-16,-17,-18,-20,23,-24,23,-25,23,]),'GREATER':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[24,-21,-22,-23,-19,24,-6,-7,-8,-9,-10,24,24,-13,-14,-15,-16,-17,-18,-20,24,-24,24,-25,24,]),'LESS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[25,-21,-22,-23,-19,25,-6,-7,-8,-9,-10,25,25,-13,-14,-15,-16,-17,-18,-20,25,-24,25,-25,25,]),'GREATEREQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[26,-21,-22,-23,-19,26,-6,-7,-8,-9,-10,26,26,-13,-14,-15,-16,-17,-18,-20,26,-24,26,-25,26,]),'LESSEQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,51,56,58,65,],[27,-21,-22,-23,-19,27,-6,-7,-8,-9,-10,27,27,-13,-14,-15,-16,-17,-18,-20,27,-24,27,-25,27,]),'RPAREN':([8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,55,56,58,59,60,63,],[-21,-22,-23,-19,46,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,51,-29,-24,-30,58,-25,-27,62,-28,]),'COMMA':([8,9,10,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,51,58,59,],[-21,-22,-23,-19,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,52,54,-24,-25,61,]),'LCURLY':([12,],[32,]),'DOT':([31,],[49,]),'RCURLY':([62,],[64,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,13,]),'expression':([0,2,6,7,15,16,17,18,19,20,21,22,23,24,25,26,27,30,52,53,64,],[4,4,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,48,48,56,65,]),'function_definition':([0,2,],[5,5,]),'param_list':([30,52,],[47,55,]),'arg_list':([57,61,],[60,63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',39),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',40),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',47),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',48),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parser.py',49),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',54),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',55),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binop','parser.py',56),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binop','parser.py',57),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',65),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',70),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',75),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',80),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',85),
  ('expression -> IDENTIFIER LPAREN param_list RPAREN','expression',4,'p_expression_function_call','parser.py',90),
  ('expression -> LAMBDA IDENTIFIER DOT LPAREN expression RPAREN','expression',6,'p_expression_lambda','parser.py',95),
  ('function_definition -> MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLON','function_definition',10,'p_function_definition','parser.py',101),
  ('arg_list -> IDENTIFIER','arg_list',1,'p_arg_list','parser.py',110),
  ('arg_list -> IDENTIFIER COMMA arg_list','arg_list',3,'p_arg_list','parser.py',111),
  ('param_list -> expression','param_list',1,'p_param_list','parser.py',120),
  ('param_list -> expression COMMA param_list','param_list',3,'p_param_list','parser.py',121),
]
