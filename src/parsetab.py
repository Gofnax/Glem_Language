
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftANDORleftEQUALNOTEQUALGREATERLESSGREATEREQUALLESSEQUALleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightNOTAND BOOLEAN COMMA DIVIDE EQUAL GREATER GREATEREQUAL IDENTIFIER LAMBDA LCURLY LESS LESSEQUAL LPAREN MEY MINUS MODULO MULTIPLY NOT NOTEQUAL NUMBER OR PLUS RCURLY RPAREN SEMICOLONprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression SEMICOLON\n                 | function_definition\n                 | expression_function_call SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression NOTEQUAL expression\n                  | expression EQUAL expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLEANexpression : IDENTIFIERexpression : LAMBDA IDENTIFIER '.' expressionfunction_definition : MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLONarg_list : IDENTIFIER\n                | IDENTIFIER COMMA arg_list\n                | NUMBERexpression_function_call : IDENTIFIER LPAREN arg_list RPARENempty : "
    
_lr_action_items = {'NOT':([0,2,3,5,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,63,65,],[7,7,-3,-5,7,7,-2,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,-6,7,7,-26,]),'LPAREN':([0,2,3,5,7,8,11,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,58,63,65,],[8,8,-3,-5,8,8,33,-2,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,-6,8,60,8,-26,]),'NUMBER':([0,2,3,5,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,53,55,60,63,65,],[9,9,-3,-5,9,9,-2,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,-6,52,9,52,52,9,-26,]),'BOOLEAN':([0,2,3,5,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,63,65,],[10,10,-3,-5,10,10,-2,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,-6,10,10,-26,]),'IDENTIFIER':([0,2,3,5,7,8,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,35,53,55,60,63,65,],[11,11,-3,-5,31,31,34,-2,-4,31,31,31,31,31,31,31,31,31,31,31,31,31,-6,50,54,31,50,50,31,-26,]),'LAMBDA':([0,2,3,5,7,8,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,53,63,65,],[12,12,-3,-5,12,12,-2,-4,12,12,12,12,12,12,12,12,12,12,12,12,12,-6,12,12,-26,]),'MEY':([0,2,3,5,14,15,29,65,],[13,13,-3,-5,-2,-4,-6,-26,]),'$end':([1,2,3,5,14,15,29,65,],[0,-1,-3,-5,-2,-4,-6,-26,]),'SEMICOLON':([4,6,9,10,11,30,31,36,37,38,39,40,41,42,43,44,45,46,47,48,49,56,57,64,],[15,29,-22,-23,-24,-20,-24,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-21,-30,-25,65,]),'PLUS':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[16,-22,-23,-24,-20,-24,16,-7,-8,-9,-10,-11,16,16,16,16,16,16,16,16,-21,16,16,]),'MINUS':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[17,-22,-23,-24,-20,-24,17,-7,-8,-9,-10,-11,17,17,17,17,17,17,17,17,-21,17,17,]),'MULTIPLY':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[18,-22,-23,-24,-20,-24,18,18,18,-9,-10,-11,18,18,18,18,18,18,18,18,-21,18,18,]),'DIVIDE':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[19,-22,-23,-24,-20,-24,19,19,19,-9,-10,-11,19,19,19,19,19,19,19,19,-21,19,19,]),'MODULO':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[20,-22,-23,-24,-20,-24,20,20,20,-9,-10,-11,20,20,20,20,20,20,20,20,-21,20,20,]),'AND':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[21,-22,-23,-24,-20,-24,21,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-21,21,21,]),'OR':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[22,-22,-23,-24,-20,-24,22,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-21,22,22,]),'NOTEQUAL':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[23,-22,-23,-24,-20,-24,23,-7,-8,-9,-10,-11,23,23,-14,-15,-16,-17,-18,-19,-21,23,23,]),'EQUAL':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[24,-22,-23,-24,-20,-24,24,-7,-8,-9,-10,-11,24,24,-14,-15,-16,-17,-18,-19,-21,24,24,]),'GREATER':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[25,-22,-23,-24,-20,-24,25,-7,-8,-9,-10,-11,25,25,-14,-15,-16,-17,-18,-19,-21,25,25,]),'LESS':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[26,-22,-23,-24,-20,-24,26,-7,-8,-9,-10,-11,26,26,-14,-15,-16,-17,-18,-19,-21,26,26,]),'GREATEREQUAL':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[27,-22,-23,-24,-20,-24,27,-7,-8,-9,-10,-11,27,27,-14,-15,-16,-17,-18,-19,-21,27,27,]),'LESSEQUAL':([4,9,10,11,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,64,],[28,-22,-23,-24,-20,-24,28,-7,-8,-9,-10,-11,28,28,-14,-15,-16,-17,-18,-19,-21,28,28,]),'RPAREN':([9,10,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,57,59,61,],[-22,-23,-20,-24,49,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-21,-27,56,-29,-25,-28,62,]),'LCURLY':([13,],[35,]),'.':([34,],[53,]),'COMMA':([50,54,],[55,58,]),'RCURLY':([62,],[63,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,14,]),'expression':([0,2,7,8,16,17,18,19,20,21,22,23,24,25,26,27,28,53,63,],[4,4,30,32,36,37,38,39,40,41,42,43,44,45,46,47,48,57,64,]),'function_definition':([0,2,],[5,5,]),'expression_function_call':([0,2,],[6,6,]),'arg_list':([33,55,60,],[51,59,61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',25),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',30),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',31),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',39),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',40),
  ('statement -> expression_function_call SEMICOLON','statement',2,'p_statement','parser.py',41),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',47),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',48),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',49),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parser.py',54),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',55),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',56),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binop','parser.py',57),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binop','parser.py',58),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',66),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',71),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',76),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',81),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',86),
  ('expression -> LAMBDA IDENTIFIER . expression','expression',4,'p_expression_lambda','parser.py',91),
  ('function_definition -> MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLON','function_definition',10,'p_function_definition','parser.py',96),
  ('arg_list -> IDENTIFIER','arg_list',1,'p_arg_list','parser.py',104),
  ('arg_list -> IDENTIFIER COMMA arg_list','arg_list',3,'p_arg_list','parser.py',105),
  ('arg_list -> NUMBER','arg_list',1,'p_arg_list','parser.py',106),
  ('expression_function_call -> IDENTIFIER LPAREN arg_list RPAREN','expression_function_call',4,'p_expression_function_call','parser.py',114),
  ('empty -> <empty>','empty',0,'p_expression_empty','parser.py',118),
]
