
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftANDORleftEQUALNOTEQUALGREATERLESSGREATEREQUALLESSEQUALleftPLUSMINUSleftMULTIPLYDIVIDEMODULOrightNOTAND BOOLEAN COMMA DIVIDE EQUAL GREATER GREATEREQUAL IDENTIFIER LAMBDA LCURLY LESS LESSEQUAL LPAREN MEY MINUS MODULO MULTIPLY NOT NOTEQUAL NUMBER OR PLUS RCURLY RPAREN SEMICOLONprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression SEMICOLON\n                 | function_definitionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQUAL expression\n                  | expression NOTEQUAL expression\n                  | expression GREATER expression\n                  | expression LESS expression\n                  | expression GREATEREQUAL expression\n                  | expression LESSEQUAL expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLEANexpression : IDENTIFIERexpression : LAMBDA IDENTIFIER '.' expressionfunction_definition : MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLONarg_list : IDENTIFIER\n                | IDENTIFIER COMMA arg_listexpression : IDENTIFIER LPAREN arg_list RPAREN"
    
_lr_action_items = {'NOT':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,59,61,],[6,6,-3,-5,6,6,-2,-4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-25,]),'LPAREN':([0,2,3,5,6,7,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,54,59,61,],[7,7,-3,-5,7,7,30,-2,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,56,7,-25,]),'NUMBER':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,59,61,],[8,8,-3,-5,8,8,-2,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-25,]),'BOOLEAN':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,59,61,],[9,9,-3,-5,9,9,-2,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-25,]),'IDENTIFIER':([0,2,3,5,6,7,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,30,32,49,51,56,59,61,],[10,10,-3,-5,10,10,31,-2,-4,10,10,10,10,10,10,10,10,10,10,10,10,10,47,50,10,47,47,10,-25,]),'LAMBDA':([0,2,3,5,6,7,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,49,59,61,],[11,11,-3,-5,11,11,-2,-4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-25,]),'MEY':([0,2,3,5,13,14,61,],[12,12,-3,-5,-2,-4,-25,]),'$end':([1,2,3,5,13,14,61,],[0,-1,-3,-5,-2,-4,-25,]),'SEMICOLON':([4,8,9,10,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[14,-21,-22,-23,-19,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,-28,-24,61,]),'PLUS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[15,-21,-22,-23,-19,15,-6,-7,-8,-9,-10,15,15,15,15,15,15,15,15,-20,-28,15,15,]),'MINUS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[16,-21,-22,-23,-19,16,-6,-7,-8,-9,-10,16,16,16,16,16,16,16,16,-20,-28,16,16,]),'MULTIPLY':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[17,-21,-22,-23,-19,17,17,17,-8,-9,-10,17,17,17,17,17,17,17,17,-20,-28,17,17,]),'DIVIDE':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[18,-21,-22,-23,-19,18,18,18,-8,-9,-10,18,18,18,18,18,18,18,18,-20,-28,18,18,]),'MODULO':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[19,-21,-22,-23,-19,19,19,19,-8,-9,-10,19,19,19,19,19,19,19,19,-20,-28,19,19,]),'AND':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[20,-21,-22,-23,-19,20,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,-28,20,20,]),'OR':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[21,-21,-22,-23,-19,21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,-28,21,21,]),'EQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[22,-21,-22,-23,-19,22,-6,-7,-8,-9,-10,22,22,-13,-14,-15,-16,-17,-18,-20,-28,22,22,]),'NOTEQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[23,-21,-22,-23,-19,23,-6,-7,-8,-9,-10,23,23,-13,-14,-15,-16,-17,-18,-20,-28,23,23,]),'GREATER':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[24,-21,-22,-23,-19,24,-6,-7,-8,-9,-10,24,24,-13,-14,-15,-16,-17,-18,-20,-28,24,24,]),'LESS':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[25,-21,-22,-23,-19,25,-6,-7,-8,-9,-10,25,25,-13,-14,-15,-16,-17,-18,-20,-28,25,25,]),'GREATEREQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[26,-21,-22,-23,-19,26,-6,-7,-8,-9,-10,26,26,-13,-14,-15,-16,-17,-18,-20,-28,26,26,]),'LESSEQUAL':([4,8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,52,53,60,],[27,-21,-22,-23,-19,27,-6,-7,-8,-9,-10,27,27,-13,-14,-15,-16,-17,-18,-20,-28,27,27,]),'RPAREN':([8,9,10,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,53,55,57,],[-21,-22,-23,-19,46,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-20,-26,52,-28,-24,-27,58,]),'LCURLY':([12,],[32,]),'.':([31,],[49,]),'COMMA':([47,50,],[51,54,]),'RCURLY':([58,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,13,]),'expression':([0,2,6,7,15,16,17,18,19,20,21,22,23,24,25,26,27,49,59,],[4,4,28,29,33,34,35,36,37,38,39,40,41,42,43,44,45,53,60,]),'function_definition':([0,2,],[5,5,]),'arg_list':([30,51,56,],[48,55,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',23),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',27),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',28),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','parser.py',35),
  ('statement -> function_definition','statement',1,'p_statement','parser.py',36),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',40),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',41),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',42),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',43),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','parser.py',47),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_binop','parser.py',48),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',49),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',56),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',60),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',64),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser.py',68),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',72),
  ('expression -> LAMBDA IDENTIFIER . expression','expression',4,'p_expression_lambda','parser.py',76),
  ('function_definition -> MEY LCURLY IDENTIFIER COMMA LPAREN arg_list RPAREN RCURLY expression SEMICOLON','function_definition',10,'p_function_definition','parser.py',80),
  ('arg_list -> IDENTIFIER','arg_list',1,'p_arg_list','parser.py',87),
  ('arg_list -> IDENTIFIER COMMA arg_list','arg_list',3,'p_arg_list','parser.py',88),
  ('expression -> IDENTIFIER LPAREN arg_list RPAREN','expression',4,'p_expression_function_call','parser.py',95),
]
